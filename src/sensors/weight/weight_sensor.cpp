#include "../../../include/weight_sensor.h"

HX711 scale;

void initWeight() {
  Serial.println("üì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å...");
  
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(FIXED_SCALE_FACTOR);
  
  // Read offset from EEPROM
  long storedOffset;
  EEPROM.get(EEPROM_OFFSET_ADDR, storedOffset);
  
  // Check if valid offset exists (not default EEPROM value)
  if (storedOffset != -1 && storedOffset != 0xFFFFFFFF) {
    scale.set_offset(storedOffset);
    Serial.print("üìè ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ offset ‡∏à‡∏≤‡∏Å EEPROM: ");
    Serial.println(storedOffset);
  } else {
    Serial.println("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ offset ‡πÉ‡∏ô EEPROM - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
  }
  
  Serial.println("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
}

StaticJsonDocument<256> readWeight() {
  StaticJsonDocument<256> doc;
  doc["name"] = WEIGHT_SENSOR;
  JsonArray values = doc.createNestedArray("value");

  float weight = scale.get_units(10);

  JsonObject weightValue = values.createNestedObject();
  weightValue["type"] = "weight";
  weightValue["unit"] = "kg";
  weightValue["value"] = round(weight * 1000.0) / 1000.0;

  return doc;
}

void calibrateWeight() {
  Serial.println("üîß HX711 Weight Calibration");
  Serial.println("üìè ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö scale...");

  Serial.println("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ scale:");
  Serial.print("   ‚Ü™ read: \t\t");
  Serial.println(scale.read());			// print a raw reading from the ADC

  Serial.print("   ‚Ü™ read average: \t");
  Serial.println(scale.read_average(20));  	// print the average of 20 readings from the ADC

  Serial.print("   ‚Ü™ get value: \t\t");
  Serial.println(scale.get_value(5));		// print the average of 5 readings from the ADC minus the tare weight (not set yet)

  Serial.print("   ‚Ü™ get units: \t\t");
  Serial.println(scale.get_units(5), 1);	// print the average of 5 readings from the ADC minus tare weight (not set) divided
						// by the SCALE parameter (not set yet)

  // Set scale factor and tare
  scale.set_scale(FIXED_SCALE_FACTOR);          // set scale factor to fixed value
  scale.tare();				        // reset the scale to 0
  
  // Get and save offset to EEPROM
  long currentOffset = scale.get_offset();
  EEPROM.put(EEPROM_OFFSET_ADDR, currentOffset);
  
  Serial.print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ offset ‡∏•‡∏á EEPROM: ");
  Serial.println(currentOffset);

  Serial.println("‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ scale:");
  Serial.print("   ‚Ü™ read: \t\t");
  Serial.println(scale.read());                 // print a raw reading from the ADC

  Serial.print("   ‚Ü™ read average: \t");
  Serial.println(scale.read_average(20));       // print the average of 20 readings from the ADC

  Serial.print("   ‚Ü™ get value: \t\t");
  Serial.println(scale.get_value(5));		// print the average of 5 readings from the ADC minus the tare weight, set with tare()

  Serial.print("   ‚Ü™ get units: \t\t");
  Serial.println(scale.get_units(5), 1);        // print the average of 5 readings from the ADC minus tare weight, divided
						// by the SCALE parameter set with set_scale

  Serial.println("üéØ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ scale ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");
  Serial.print("üìè Scale Factor: ");
  Serial.println(FIXED_SCALE_FACTOR, 1);
  
  // Test readings
  Serial.println("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤:");
  Serial.print("   ‚Ü™ one reading:\t");
  Serial.print(scale.get_units(), 1);
  Serial.print("\t| average:\t");
  Serial.println(scale.get_units(10), 1);
}