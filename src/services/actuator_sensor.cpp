#include <Arduino.h>
#include <ArduinoJson.h>
#include "actuator_sensor.h"

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå ActuatorSensor
ActuatorSensor::ActuatorSensor() {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏û‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö L298N
    pinMode(ENA_PIN, OUTPUT);
    pinMode(IN1_PIN, OUTPUT);
    pinMode(IN2_PIN, OUTPUT);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á
    stop();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á actuator
void ActuatorSensor::begin() {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    Serial.println("üìå Actuator Control Ready");
    Serial.println("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:");
    Serial.println("[control]:actuator:extend  - ‡∏î‡∏±‡∏ô actuator ‡∏≠‡∏≠‡∏Å");
    Serial.println("[control]:actuator:retract - ‡∏î‡∏∂‡∏á actuator ‡∏Å‡∏•‡∏±‡∏ö");
    Serial.println("[control]:actuator:stop    - ‡∏´‡∏¢‡∏∏‡∏î actuator");
    Serial.println("[control]:status           - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ actuator");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Serial
void ActuatorSensor::update() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeout ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    if (isMoving) {
        checkTimeout();
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
    if (!checkPower()) {
        stop();
        Serial.println("ERROR:NO_POWER");
        return;
    }
    
    while (Serial.available() > 0) {
        char c = Serial.read();
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏•‡∏á‡πÉ‡∏ô‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà newline
        if (c != '\n') {
            commandBuffer += c;
        } else {
            // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö newline
            if (commandBuffer.length() > 0) {
                processCommand(commandBuffer);
                commandBuffer = "";  // ‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå
            }
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeout
void ActuatorSensor::checkTimeout() {
    if (millis() - moveStartTime >= TIMEOUT_MS) {
        stop();
        Serial.println("ERROR:TIMEOUT");
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
bool ActuatorSensor::checkPower() {
    // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏à‡∏£‡∏¥‡∏á
    // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡∏•‡∏≠‡∏î
    return true;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
void ActuatorSensor::processCommand(String command) {
    command.trim();  // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    if (!command.startsWith(CMD_PREFIX)) {
        Serial.println("ERROR:INVALID_COMMAND");
        return;
    }
    
    // ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å prefix
    String cmd = command.substring(strlen(CMD_PREFIX));
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á status
    if (cmd == CMD_STATUS) {
        sendStatus();
        return;
    }
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á actuator
    if (cmd.startsWith(CMD_ACTUATOR)) {
        String actuatorCmd = cmd.substring(strlen(CMD_ACTUATOR));
        
        if (actuatorCmd == CMD_EXTEND) {
            extend();
            Serial.println("OK:MOVING");
            return;
        }
        
        if (actuatorCmd == CMD_RETRACT) {
            retract();
            Serial.println("OK:MOVING");
            return;
        }
        
        if (actuatorCmd == CMD_STOP) {
            stop();
            Serial.println("OK:STOPPED");
            return;
        }
    }
    
    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    Serial.println("ERROR:INVALID_COMMAND");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏±‡∏ô actuator ‡∏≠‡∏≠‡∏Å
void ActuatorSensor::extend() {
    if (!checkPower()) {
        Serial.println("ERROR:NO_POWER");
        return;
    }
    
    digitalWrite(IN1_PIN, HIGH);
    digitalWrite(IN2_PIN, LOW);
    analogWrite(ENA_PIN, 255);  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    isMoving = true;
    isExtending = true;
    moveStartTime = millis();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á actuator ‡∏Å‡∏•‡∏±‡∏ö
void ActuatorSensor::retract() {
    if (!checkPower()) {
        Serial.println("ERROR:NO_POWER");
        return;
    }
    
    digitalWrite(IN1_PIN, LOW);
    digitalWrite(IN2_PIN, HIGH);
    analogWrite(ENA_PIN, 255);  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    isMoving = true;
    isExtending = false;
    moveStartTime = millis();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î actuator
void ActuatorSensor::stop() {
    analogWrite(ENA_PIN, 0);  // ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
    isMoving = false;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
void ActuatorSensor::sendStatus() {
    if (!isMoving) {
        Serial.println(isExtending ? "OK:EXTENDED" : "OK:RETRACTED");
    } else {
        Serial.println("OK:MOVING");
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
String ActuatorSensor::getStatusJson() {
    StaticJsonDocument<256> doc;
    
    if (!isMoving) {
        doc["status"] = "OK";
        doc["state"] = isExtending ? "EXTENDED" : "RETRACTED";
    } else {
        doc["status"] = "OK";
        doc["state"] = isExtending ? "EXTENDING" : "RETRACTING";
    }
    
    String jsonString;
    serializeJson(doc, jsonString);
    return jsonString;
} 